{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["// add libraries\nimport flatpickr from 'flatpickr';\nimport iziToast from 'izitoast';\n\n// Додатковий імпорт стилів\nimport 'flatpickr/dist/flatpickr.min.css';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// get elemets: input, button, text's spans (days, hours, minutes, seconds)\n// inside input can choose calendar's days, when choose privious days start button block and warning message popup, next days - start button active\n// when push start button inside spans appear time left to the day and time that choosen inside input\n\nconst refs = {\n  dateInput: document.querySelector('#datetime-picker'),\n  startBtn: document.querySelector('button[data-start]'),\n  days: document.querySelector('span[data-days]'),\n  hours: document.querySelector('span[data-hours]'),\n  minutes: document.querySelector('span[data-minutes]'),\n  seconds: document.querySelector('span[data-seconds]'),\n};\n\n// create variable for timer\nlet timerId = null;\n\n// time in ms from future date till now\nlet reverseClock = 0;\n\n// iziToast library options\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    //   time in ms from future date till now\n    reverseClock = selectedDates[0] - Date.now();\n    // if before now - show warning and block button, if future date - open button\n    if (reverseClock < 0) {\n      // block start button\n      refs.startBtn.disabled = true;\n      //   show warning message\n      iziToast.show({\n        position: 'topRight',\n        backgroundColor: 'red',\n        messageColor: 'white',\n        message: 'Please choose a date in the future',\n        // close: true,\n        // timeout: false,\n      });\n    } else {\n      // unblock start button\n      refs.startBtn.disabled = false;\n    }\n  },\n};\n\n//\nflatpickr(refs.dateInput, options);\n\n// add event listener to start button\nrefs.startBtn.addEventListener('click', handleClick);\n\n// create reverse clock, block/unblock button and input\nfunction handleClick() {\n  // disable button and input after push start button\n  refs.startBtn.disabled = true;\n  refs.dateInput.disabled = true;\n\n  // set interval for time rewriting every second\n  timerId = setInterval(() => {\n    if (reverseClock < 1000) {\n      // clear interval function, unblock input and button after timer less than 1 s\n      clearInterval(timerId);\n      refs.startBtn.disabled = false;\n      refs.dateInput.disabled = false;\n    }\n\n    // destructure days, hours, minutes, seconds culculated from total amount of time remain in ms\n    const { days, hours, minutes, seconds } = convertMs(reverseClock);\n\n    // decrement time by 1 second every every time interval (1 second)\n    reverseClock -= 1000;\n\n    // add text content for spans that count time backwards (days, hours, minutes, seconds)\n    addTimeTextContentFormated(days, hours, minutes, seconds);\n  }, 1000);\n}\n\n// add correct time data to html tags (spans)\nfunction addTimeTextContentFormated(days, hours, min, sec) {\n  refs.days.textContent = addLeadingZero(days);\n  refs.hours.textContent = addLeadingZero(hours);\n  refs.minutes.textContent = addLeadingZero(min);\n  refs.seconds.textContent = addLeadingZero(sec);\n}\n\n// complete time format with 0, if just one number\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n\n// converting time remaining\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n"],"names":["refs","timerId","reverseClock","options","selectedDates","iziToast","flatpickr","handleClick","days","hours","minutes","seconds","convertMs","addTimeTextContentFormated","min","sec","addLeadingZero","value","ms"],"mappings":"+IAYA,MAAMA,EAAO,CACX,UAAW,SAAS,cAAc,kBAAkB,EACpD,SAAU,SAAS,cAAc,oBAAoB,EACrD,KAAM,SAAS,cAAc,iBAAiB,EAC9C,MAAO,SAAS,cAAc,kBAAkB,EAChD,QAAS,SAAS,cAAc,oBAAoB,EACpD,QAAS,SAAS,cAAc,oBAAoB,CACtD,EAGA,IAAIC,EAAU,KAGVC,EAAe,EAGnB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErBF,EAAeE,EAAc,GAAK,KAAK,IAAG,EAEtCF,EAAe,GAEjBF,EAAK,SAAS,SAAW,GAEzBK,EAAS,KAAK,CACZ,SAAU,WACV,gBAAiB,MACjB,aAAc,QACd,QAAS,oCAGjB,CAAO,GAGDL,EAAK,SAAS,SAAW,EAE5B,CACH,EAGAM,EAAUN,EAAK,UAAWG,CAAO,EAGjCH,EAAK,SAAS,iBAAiB,QAASO,CAAW,EAGnD,SAASA,GAAc,CAErBP,EAAK,SAAS,SAAW,GACzBA,EAAK,UAAU,SAAW,GAG1BC,EAAU,YAAY,IAAM,CACtBC,EAAe,MAEjB,cAAcD,CAAO,EACrBD,EAAK,SAAS,SAAW,GACzBA,EAAK,UAAU,SAAW,IAI5B,KAAM,CAAE,KAAAQ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUV,CAAY,EAGhEA,GAAgB,IAGhBW,EAA2BL,EAAMC,EAAOC,EAASC,CAAO,CACzD,EAAE,GAAI,CACT,CAGA,SAASE,EAA2BL,EAAMC,EAAOK,EAAKC,EAAK,CACzDf,EAAK,KAAK,YAAcgB,EAAeR,CAAI,EAC3CR,EAAK,MAAM,YAAcgB,EAAeP,CAAK,EAC7CT,EAAK,QAAQ,YAAcgB,EAAeF,CAAG,EAC7Cd,EAAK,QAAQ,YAAcgB,EAAeD,CAAG,CAC/C,CAGA,SAASC,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAGA,SAASL,EAAUM,EAAI,CAQrB,MAAMV,EAAO,KAAK,MAAMU,EAAK,KAAG,EAE1BT,EAAQ,KAAK,MAAOS,EAAK,MAAO,IAAI,EAEpCR,EAAU,KAAK,MAAQQ,EAAK,MAAO,KAAQ,GAAM,EAEjDP,EAAU,KAAK,MAASO,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAV,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}