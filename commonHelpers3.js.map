{"version":3,"file":"commonHelpers3.js","sources":["../src/js/03-promises.js"],"sourcesContent":["// add library for alert messages\nimport iziToast from 'izitoast';\n\n// Додатковий імпорт стилів\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// 1 - delay in ms\n// 2 - step of growing delay for every promise after first\n// 3 - promises' quantity that you create\n\n// get form\nconst form = document.querySelector('.form');\n\n// get form's elements\nconst { delay, step, amount } = form.elements;\n\n// get value from form on sumbit\nform.addEventListener('submit', handlerSubmitForm);\n\n// create submit function\nfunction handlerSubmitForm(e) {\n  // prevent rerendering after submit\n  e.preventDefault();\n\n  // get input values in numbers\n  let timeDelayNumber = Number(delay.value);\n  let timeStepNumber = Number(step.value);\n  let repeatAmountNumber = Number(amount.value);\n\n  // check if input values were right\n  if (timeDelayNumber < 0 || timeStepNumber < 0 || repeatAmountNumber <= 0) {\n    // error message\n    iziToast.error({\n      position: 'topRight',\n      message:\n        'Negative time delays or amount <= 0! Delays should be positive numbers and amount more than 0.',\n      messageColor: 'white',\n      backgroundColor: 'red',\n    });\n  }\n\n  // create promises multiple amount of times\n  for (let i = 1; i <= repeatAmountNumber; i += 1) {\n    createPromise(i, timeDelayNumber)\n      .then(({ position, delay }) => {\n        // success message\n        iziToast.show({\n          position: 'topRight',\n          message: `✅ Fulfilled promise ${position} in ${delay}ms`,\n          messageColor: 'white',\n          backgroundColor: 'green',\n        });\n      })\n      .catch(({ position, delay }) => {\n        // error message\n        iziToast.error({\n          position: 'topRight',\n          message: `Rejected promise ${position} in ${delay}ms`,\n          messageColor: 'white',\n          backgroundColor: 'red',\n        });\n      });\n\n    // correct delay for every step\n    timeDelayNumber += timeStepNumber;\n  }\n\n  // reset form after submit and all operations\n  form.reset();\n}\n\n// create promises 30% success, 70% error\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["form","delay","step","amount","handlerSubmitForm","e","timeDelayNumber","timeStepNumber","repeatAmountNumber","iziToast","i","createPromise","position","resolve","reject","shouldResolve"],"mappings":"wIAWA,MAAMA,EAAO,SAAS,cAAc,OAAO,EAGrC,CAAE,MAAAC,EAAO,KAAAC,EAAM,OAAAC,CAAM,EAAKH,EAAK,SAGrCA,EAAK,iBAAiB,SAAUI,CAAiB,EAGjD,SAASA,EAAkBC,EAAG,CAE5BA,EAAE,eAAc,EAGhB,IAAIC,EAAkB,OAAOL,EAAM,KAAK,EACpCM,EAAiB,OAAOL,EAAK,KAAK,EAClCM,EAAqB,OAAOL,EAAO,KAAK,GAGxCG,EAAkB,GAAKC,EAAiB,GAAKC,GAAsB,IAErEC,EAAS,MAAM,CACb,SAAU,WACV,QACE,iGACF,aAAc,QACd,gBAAiB,KACvB,CAAK,EAIH,QAASC,EAAI,EAAGA,GAAKF,EAAoBE,GAAK,EAC5CC,EAAcD,EAAGJ,CAAe,EAC7B,KAAK,CAAC,CAAE,SAAAM,EAAU,MAAAX,KAAY,CAE7BQ,EAAS,KAAK,CACZ,SAAU,WACV,QAAS,uBAAuBG,QAAeX,MAC/C,aAAc,QACd,gBAAiB,OAC3B,CAAS,CACT,CAAO,EACA,MAAM,CAAC,CAAE,SAAAW,EAAU,MAAAX,KAAY,CAE9BQ,EAAS,MAAM,CACb,SAAU,WACV,QAAS,oBAAoBG,QAAeX,MAC5C,aAAc,QACd,gBAAiB,KAC3B,CAAS,CACT,CAAO,EAGHK,GAAmBC,EAIrBP,EAAK,MAAK,CACZ,CAGA,SAASW,EAAcC,EAAUX,EAAO,CACtC,OAAO,IAAI,QAAQ,CAACY,EAASC,IAAW,CACtC,MAAMC,EAAgB,KAAK,OAAM,EAAK,GAEtC,WAAW,IAAM,CACXA,EACFF,EAAQ,CAAE,SAAAD,EAAU,MAAAX,CAAK,CAAE,EAE3Ba,EAAO,CAAE,SAAAF,EAAU,MAAAX,CAAK,CAAE,CAE7B,EAAEA,CAAK,CACZ,CAAG,CACH"}